{"version":3,"file":"static/js/924.1946de8f.chunk.js","mappings":"wKACA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,KAAO,sBAAsB,OAAS,yB,mBCkB5M,EAfmB,SAACA,GAClB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEC,OAAS,IAAMD,EAAEE,OAAOC,UACxCC,EAAAA,EAAAA,MAACC,EAAAA,GAAO,CAACC,GAAIV,EAAKO,SAAA,EAChBL,EAAAA,EAAAA,KAAA,OACEC,UAAWC,EAAEO,KACbC,IAAI,yEAELb,EAAMc,SAIf,ECGA,EAjBgB,SAACd,GAKf,OAGES,EAAAA,EAAAA,MAAA,OAAKL,UAAWC,EAAEU,SAASP,SAAA,EAEzBL,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEW,OAAOR,SAAC,OAC1BL,EAAAA,EAAAA,KAAA,KAAAK,SAAIR,EAAMiB,UACTjB,EAAMkB,OAGb,E,iDCZMC,GAAcC,EAAAA,EAAAA,GAAiB,IA4BrC,GAAeC,EAAAA,EAAAA,GAAU,CACvBC,KAAM,WADR,EA1BoB,SAACtB,GACnB,OACES,EAAAA,EAAAA,MAAA,QAAMc,SAAUvB,EAAMwB,aAAahB,SAAA,EACjCL,EAAAA,EAAAA,KAAA,OAAAK,UACEL,EAAAA,EAAAA,KAACsB,EAAAA,EAAK,CACJC,YAAa,qBACbZ,KAAM,iBACNa,UAAWC,EAAAA,GACXC,SAAU,CAACC,EAAAA,EAAUX,QAOzBhB,EAAAA,EAAAA,KAAA,OAAAK,UACEL,EAAAA,EAAAA,KAAA,UAAAK,SAEC,oBAMT,ICMA,EA9BgB,SAACR,GACf,IAAI+B,EAAQ/B,EAAMgC,aACdC,EAAkBF,EAAMG,QAAQC,KAAI,SAACC,GAAC,OACxCjC,EAAAA,EAAAA,KAACkC,EAAU,CAACvB,KAAMsB,EAAEtB,KAAiBZ,GAAIkC,EAAElC,IAAZkC,EAAElC,GAAgB,IAG/CoC,EAAmBP,EAAMhB,SAASoB,KAAI,SAACI,GAAC,OAC1CpC,EAAAA,EAAAA,KAACqC,EAAO,CAACvB,QAASsB,EAAEtB,QAAoBC,KAAe,IAATqB,EAAErC,GAAW,IAAM,KAA/BqC,EAAErC,GAAoC,IAY1E,OAAKF,EAAMyC,QAGThC,EAAAA,EAAAA,MAAA,OAAKL,UAAWC,EAAE6B,QAAQ1B,SAAA,EACxBL,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEqC,aAAalC,SAAEyB,KACjC9B,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEU,SAASP,SAAE8B,KAE7BnC,EAAAA,EAAAA,KAACwC,EAAW,CAACpB,SAZA,SAACqB,GAChB5C,EAAM6C,WAAWD,EAAOE,eAE1B,QAE0B3C,EAAAA,EAAAA,KAAC4C,EAAAA,GAAQ,CAACpC,GAAG,UAUzC,E,wCCYA,GAAeqC,EAAAA,EAAAA,KACbC,EAAAA,EAAAA,KAdoB,SAAClB,GACrB,MAAO,CACLC,aAAcD,EAAMC,aAExB,IACyB,SAACkB,GACxB,MAAO,CACLL,WAAY,SAACC,GACXI,GAASC,EAAAA,EAAAA,GAAwBL,GACnC,EAEJ,IAIEM,EAAAA,EAFF,CAGEC,E","sources":["webpack://sozset/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogsForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__NFQzY\",\"dialogsItems\":\"Dialogs_dialogsItems__rv3ko\",\"active\":\"Dialogs_active__wPWxi\",\"messages\":\"Dialogs_messages__N2LkO\",\"img1\":\"Dialogs_img1__mB70C\",\"circle\":\"Dialogs_circle__FcfU2\"};","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n  let path = \"/dialogs/\" + props.id;\r\n  return (\r\n    <div className={s.dialog + \" \" + s.active}>\r\n      <NavLink to={path}>\r\n        <img\r\n          className={s.img1}\r\n          src=\"https://cs14.pikabu.ru/post_img/2023/02/13/8/1676295806139337963.jpg\"\r\n        />\r\n        {props.name}\r\n      </NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\n\r\nconst Message = (props) => {\r\n  // let LinkRight = () => (props.side = 100 ? s.messages1 : s.messages2);\r\n  // debugger;\r\n  let LinkRight = s.messages2;\r\n\r\n  return (\r\n    // <div className={s.message}>\r\n\r\n    <div className={s.messages}>\r\n      {/* <div className={() => (props.side = 100 ? s.messages1 : s.messages2)}> */}\r\n      <div className={s.circle}>1</div>\r\n      <p>{props.message}</p>\r\n      {props.side}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\n\r\nimport { reduxForm, Field } from \"redux-form\";\r\nimport { required, maxLengthCreater } from \"../../utils/validators/validators\";\r\nimport { Textarea } from \"../Commen/FormControls/FormControls\";\r\n\r\nconst maxLength50 = maxLengthCreater(50);\r\n\r\nconst DialogsForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          placeholder={\"Enter your message\"}\r\n          name={\"newMessageText\"}\r\n          component={Textarea}\r\n          validate={[required, maxLength50]}\r\n          //component={\"textarea\"}\r\n          // onChange={onMessageChange}\r\n          // ref={newMessageElement}\r\n          // value={newMessageText}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button\r\n        //onClick={addMessage}\r\n        >\r\n          Add Message\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default reduxForm({\r\n  form: \"dialogs\",\r\n})(DialogsForm);\r\n","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nimport DialogsForm from \"./DialogsForm\";\r\n\r\nconst Dialogs = (props) => {\r\n  let state = props.messagesPage;\r\n  let dialogsElements = state.dialogs.map((d) => (\r\n    <DialogItem name={d.name} key={d.id} id={d.id} />\r\n  ));\r\n\r\n  let messagesElements = state.messages.map((m) => (\r\n    <Message message={m.message} key={m.id} side={m.id === 1 ? 100 : 200} />\r\n  ));\r\n\r\n  // let newMessageText = state.newMessageText;\r\n\r\n  // let newMessageElement = React.createRef();\r\n\r\n  let addMessage = (values) => {\r\n    props.addMessage(values.newMessageText);\r\n    // alert(values.newMessageText);\r\n  };\r\n\r\n  if (!props.isAuth) return <Navigate to=\"/login\" />;\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>{dialogsElements}</div>\r\n      <div className={s.messages}>{messagesElements}</div>\r\n\r\n      <DialogsForm onSubmit={addMessage} />\r\n    </div>\r\n  );\r\n};\r\nexport default Dialogs;\r\n\r\n// [\r\n//   <DialogItem name={dialogsData[0].name} id={dialogsData[0].id} />,\r\n//   <DialogItem name={dialogsData[1].name} id={dialogsData[1].id} />,\r\n// ];\r\n// const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n// const isOdd = (num) => num % 2 !== 0;\r\n// const odd = numbers.filter(isOdd);\r\n// let messagesElements = props.state.messages.map((m) => (\r\n//   <Message message={m.message} />\r\n// ));\r\n// let messagesElements = numbers.filter(isOdd);\r\n// const sweetArray = [2, 3, 4, 5, 35];\r\n// const messagesElements = sweetArray.map((sweetItem) => {\r\n//   return sweetItem * 2;\r\n// });\r\n","import React from \"react\";\r\nimport { addMessageActionCreater } from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport StoreContext from \"../../StoreContext\";\r\n\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\n\r\nconst DialogsContaine1 = () => {\r\n  return (\r\n    <StoreContext.Consumer>\r\n      {(store) => {\r\n        let addMessage = () => {\r\n          store.dispatch(addMessageActionCreater());\r\n        };\r\n\r\n        // let onMessageChange = (text) => {\r\n        //   store.dispatch(updateNewMessageTextActionCreater(text));\r\n        // };\r\n        return (\r\n          <Dialogs\r\n            messagesPage={store.getState().messagesPage}\r\n            // dialogs={state.messagesPage.dialogs}\r\n            addMessage={addMessage}\r\n            // onMessageChange={onMessageChange}\r\n            // newMessageText={state.messagesPage.newMessageText}\r\n          />\r\n        );\r\n      }}\r\n    </StoreContext.Consumer>\r\n  );\r\n};\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    messagesPage: state.messagesPage,\r\n  };\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addMessage: (newMessageText) => {\r\n      dispatch(addMessageActionCreater(newMessageText));\r\n    },\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n// const DialogsContainer = connect(\r\n//   mapStateToProps,\r\n//   mapDispatchToProps\r\n// )(AuthRedirectComponent);\r\n\r\n// export default DialogsContainer;\r\n\r\n// props.addMessage(text);\r\n// props.dispatch({ type: \"ADD-MESSAGE\" });\r\n\r\n// let action = { type: \"UPDATE-NEW-MESSAGE-TEXT\", newText: text };\r\n// props.dispatch(action);\r\n"],"names":["props","path","id","_jsx","className","s","dialog","active","children","_jsxs","NavLink","to","img1","src","name","messages","circle","message","side","maxLength50","maxLengthCreater","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","state","messagesPage","dialogsElements","dialogs","map","d","DialogItem","messagesElements","m","Message","isAuth","dialogsItems","DialogsForm","values","addMessage","newMessageText","Navigate","compose","connect","dispatch","addMessageActionCreater","withAuthRedirect","Dialogs"],"sourceRoot":""}