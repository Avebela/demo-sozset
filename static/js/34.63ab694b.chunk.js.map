{"version":3,"file":"static/js/34.63ab694b.chunk.js","mappings":"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","sources":["webpack://sozset/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","webpack://sozset/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://sozset/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__gYLFC\",\"mainPhoto\":\"ProfileInfo_mainPhoto__2yPGn\"};","import React, { useEffect, useState } from \"react\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n\r\n    props.updateStatus(status);\r\n  };\r\n\r\n  const onStatusChange = (e) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!editMode && (\r\n        <div>\r\n          <span onDoubleClick={activateEditMode}>\r\n            {props.status || \"--------\"}\r\n          </span>\r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div>\r\n          <div>СТАТУС</div>\r\n          <input\r\n            onChange={onStatusChange}\r\n            autoFocus={true}\r\n            onBlur={deactivateEditMode}\r\n            value={status}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n\r\n// state = {\r\n//   editMode: false,\r\n\r\n//   status: this.props.status,\r\n// };\r\n// activateEditMode = () => {\r\n//   this.setState({ editMode: true });\r\n// };\r\n// deactivateEditMode = () => {\r\n//   this.setState({ editMode: false });\r\n\r\n//   this.props.updateStatus(this.state.status);\r\n// };\r\n\r\n// onStatusChange = (e) => {\r\n//   this.setState({\r\n//     status: e.currentTarget.value,\r\n//   });\r\n// };\r\n\r\n// componentDidUpdate(prevProps, prevState) {\r\n//   if (prevProps.status !== this.props.status) {\r\n//     this.setState({\r\n//       status: this.props.status,\r\n//     });\r\n//   }\r\n//   console.log(\"componentDidUpdate\");\r\n// }\r\n","import React from \"react\";\r\n\r\nclass ProfileStatus extends React.Component {\r\n  state = {\r\n    editMode: false,\r\n    // title: \"Yo\",\r\n    status: this.props.status,\r\n    //statusInputRef: React.createRef(),\r\n  };\r\n  activateEditMode = () => {\r\n    //console.log(this.state.editMode);\r\n    this.setState({ editMode: true });\r\n    //console.log(this.state.editMode);\r\n    // в консоль логе всегда одно и тоже значение false, т.к. фунция setState работает асинхронно,\r\n    // сетстейт только получает задачу перерисовать стейт, потом, после окончания работы здесь, в этом методе\r\n  };\r\n  deactivateEditMode = () => {\r\n    this.setState({ editMode: false });\r\n    //this.props.updateStatus(this.statusInputRef.current.value);\r\n    this.props.updateStatus(this.state.status);\r\n  };\r\n\r\n  onStatusChange = (e) => {\r\n    this.setState({\r\n      status: e.currentTarget.value,\r\n    });\r\n  };\r\n  // activateEditMode() {\r\n  //   this.setState({ editMode: true });\r\n  //   this.state.editMode = true;\r\n  // this.forceUpdate();\r\n  // }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // let a = this.state;\r\n    // let b = this.props;\r\n    if (prevProps.status !== this.props.status) {\r\n      this.setState({\r\n        status: this.props.status,\r\n      });\r\n    }\r\n    console.log(\"componentDidUpdate\");\r\n  }\r\n\r\n  render() {\r\n    console.log(\"render\");\r\n    return (\r\n      <div>\r\n        {!this.state.editMode && (\r\n          <div>\r\n            <span\r\n              //   onDoubleClick={() => {\r\n\r\n              //      this.activateEditMode.bind(this);\r\n              //   }}\r\n              // onDoubleClick={this.activateEditMode}\r\n              onDoubleClick={this.activateEditMode}\r\n            >\r\n              {this.props.status || \"--------\"}\r\n            </span>\r\n          </div>\r\n        )}\r\n        {this.state.editMode && (\r\n          <div>\r\n            <div>СТАТУС</div>\r\n            <input\r\n              onChange={this.onStatusChange}\r\n              //ref={this.statusInputRef}\r\n              autoFocus={true}\r\n              onBlur={this.deactivateEditMode}\r\n              // onBlur={() => {\r\n\r\n              //   // this.deactivateEditMode.bind(this);\r\n              // }}\r\n              //value={this.props.status}\r\n              value={this.state.status}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProfileStatus;\r\n\r\n// const ProfileStatus = (props) => {\r\n//   return (\r\n//     <div>\r\n//       <div>\r\n//         <span>{props.status}</span>\r\n//       </div>\r\n\r\n//       <div>\r\n//         <input value={props.status} />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../Commen/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\n\r\nconst ProfileInfo = (props) => {\r\n  if (!props.userProfile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  const onMainPhotoSelected = (e) => {\r\n    if (e.target.files.length) {\r\n      props.savePhoto(e.target.files[0]);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      {/* <div>\r\n        <img\r\n          src=\"https://s.w-x.co/util/image/w/de-winter-sonne-GettyImages-1299419125%20Kopie.jpg?crop=16:9&width=980&format=pjpg&auto=webp&quality=60\"\r\n          alt=\"logo\"\r\n        />\r\n      </div> */}\r\n      <div className={s.descriptionBlock}>\r\n        <div>{props.userProfile.userId}</div>\r\n        <img\r\n          src={props.userProfile.photos.large || userPhoto}\r\n          alt=\"logo\"\r\n          className={s.mainPhoto}\r\n        />\r\n        {props.isOwner && (\r\n          <input type={\"file\"} onChange={onMainPhotoSelected} />\r\n        )}\r\n        {/* <ProfileStatus status=\"Hallo!\" /> */}\r\n        <ProfileStatusWithHooks\r\n          status={props.status}\r\n          updateStatus={props.updateStatus}\r\n        />\r\n        <div>{props.userProfile.aboutMe}</div> aboutMe\r\n        <div>{props.userProfile.contacts.facebook}</div>\r\n        <div>{props.userProfile.contacts.website}</div>\r\n        <div>{props.userProfile.contacts.vk}</div>\r\n        <div>{props.userProfile.contacts.twitter}</div>\r\n        <div>{props.userProfile.contacts.instagram}</div>\r\n        <div>{props.userProfile.contacts.youtube}</div>\r\n        <div>{props.userProfile.contacts.github}</div>\r\n        <div>{props.userProfile.contacts.mainLink}</div>\r\n        <div>{props.userProfile.lookingForAJob}</div>\r\n        <div>{props.userProfile.lookingForAJobDescription}</div>\r\n        <div>{props.userProfile.fullName}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__OFhjg\",\"posts\":\"MyPosts_posts__LV+RI\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__EsrbM\"};","import React from \"react\";\r\nimport s from \"./Post.module.css\";\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src=\"https://cs14.pikabu.ru/post_img/2023/02/13/8/1676295806139337963.jpg\" />\r\n      {props.message}\r\n\r\n      <div>\r\n        <span> Like</span> {props.like}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React, { memo } from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport { reduxForm, Field } from \"redux-form\";\r\nimport {\r\n  required,\r\n  maxLengthCreater,\r\n} from \"../../../utils/validators/validators\";\r\nimport { Textarea } from \"../../Commen/FormControls/FormControls\";\r\nimport { componentDidUpdate } from \"react\";\r\n\r\nconst maxLength10 = maxLengthCreater(10);\r\n\r\nlet MyPostsForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field\r\n        placeholder={\"Enter your post\"}\r\n        name={\"newPostText\"}\r\n        // component={\"textarea\"}\r\n        component={Textarea}\r\n        validate={[required, maxLength10]}\r\n        // onChange={onPostChange}\r\n        // ref={newPostElement}\r\n        // value={props.newPostText}\r\n      />\r\n      <div>\r\n        <button>\r\n          {/* onClick={onAddPost} */}\r\n          Add post\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst MyPostsReduxForm = reduxForm({\r\n  form: \"posts\",\r\n})(MyPostsForm);\r\n//window.props = [];\r\n//class MyPosts extends React.Component {\r\n// class MyPosts extends React.PureComponent {\r\n// componentDidUpdate(pervProps, pervState, snapshot) {\r\n//   console.log(\"render Post\");\r\n// }\r\n// componentDidMount() {\r\n//   setTimeout(() => {\r\n//     this.setState({ a: 12 });\r\n//   }, 3000);\r\n// }\r\n// shouldComponentUpdate(nextProps, nextState) {\r\n//   // return false;\r\n//   return nextProps !== this.props || nextState !== this.state;\r\n//  все просто, false получаем в том случае, если предыдущие пропсы\r\n// и нынешние равны,\r\n//т.е. и this.props и nextProps ссылаются на один и тот же объект,\r\n//он не изменился, следовательно перерисовки не будет.\r\n//}\r\n//   console.log(\"render Post\");\r\n//render()\r\nconst MyPosts = memo((props) => {\r\n  //console.log(\"render Post\");\r\n  // window.props.push(props);\r\n\r\n  // console.log(props);\r\n\r\n  let postsElements =\r\n    // props.posts\r\n    // имьютабельность..компонене нельзя мутировать стейт\r\n    // reverse , splice мутируют массив... slice не мутирует\r\n    // задача перевернуть массив. компоненте можно изменять только копию массива\r\n    [...props.posts].reverse().map((p) => (\r\n      <Post\r\n        message={p.message}\r\n        // key={p.id}\r\n        like={p.like}\r\n      />\r\n    ));\r\n\r\n  //let newPostElement = React.createRef();\r\n\r\n  let onAddPost = (values) => {\r\n    props.addPost(values.newPostText);\r\n    // alert(values.newPostText);\r\n  };\r\n\r\n  // let onPostChange = () => {\r\n  //   let text = newPostElement.current.value;\r\n  //   props.onPostChange(text);\r\n  // };\r\n\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>My posts</h3>\r\n\r\n      <div>\r\n        Привет!\r\n        <MyPostsReduxForm onSubmit={onAddPost} />\r\n      </div>\r\n      <div className={s.posts}>{postsElements}</div>\r\n    </div>\r\n  );\r\n});\r\n//}\r\n\r\nexport default MyPosts;\r\n\r\n{\r\n  /* <textarea id=\"New post\"></textarea> */\r\n}\r\n{\r\n  /* {props.message} */\r\n}\r\n{\r\n  /* {doubles} */\r\n}\r\n{\r\n  /* <Post message=\"5\" like=\"7\" />\r\n        <Post message=\"10\" like=\"17\" /> */\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  addPostActionCreater,\r\n  //  updateNewPostTextActionCreater,\r\n} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport StoreContext from \"../../../StoreContext\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst MyPostsContainer1 = () => {\r\n  return (\r\n    <StoreContext.Consumer>\r\n      {(store) => {\r\n        let state = store.getState();\r\n        let addPost = () => {\r\n          store.dispatch(addPostActionCreater());\r\n        };\r\n\r\n        // let onPostChange = (text) => {\r\n        //   let action = updateNewPostTextActionCreater(text);\r\n        //   store.dispatch(action);\r\n        // };\r\n        return (\r\n          <MyPosts\r\n            // onPostChange={onPostChange}\r\n            addPost={addPost}\r\n            posts={state.profilePage.posts}\r\n            newPostText={state.profilePage.newPostText}\r\n          />\r\n        );\r\n      }}\r\n    </StoreContext.Consumer>\r\n  );\r\n};\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    //newPostText: state.profilePage.newPostText,\r\n  };\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost: (newPostText) => {\r\n      dispatch(addPostActionCreater(newPostText));\r\n    },\r\n    // onPostChange: (text) => {\r\n    //   let action = updateNewPostTextActionCreater(text);\r\n    //   dispatch(action);\r\n    // },\r\n  };\r\n};\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n\r\n// let text = newPostElement.current.value;\r\n// props.onPostChange(text);\r\n// newPostElement.current.value = \"\";\r\n\r\n// let addButton = () => {\r\n//   alert(\"Hei!\");\r\n// };\r\n// let addButton = () => {\r\n//   let text = document.getElementById(\"New post\").value;\r\n//   alert(text);\r\n// };\r\n// let numberPost = props.numbers;\r\n// const doubles = numberPost.map((num) => num);\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        isOwner={!!props.isOwner}\r\n        userProfile={props.userProfile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n        savePhoto={props.savePhoto}\r\n      />\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n\r\n// let posts = \"133\";\r\n// const numbers = [1, 4, 9];\r\n// addPost={props.addPost}\r\n// onPostChange={props.onPostChange}\r\n{\r\n  /* <MyPosts numbers={numbers} /> */\r\n}\r\n\r\n//store={props.store}\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport Profile from \"./Profile\";\r\nimport withRouter from \"../../WithRouter\";\r\nimport Login from \"../Login/Login\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport {\r\n  getUserProfile,\r\n  getStatus,\r\n  updateStatus,\r\n  savePhoto,\r\n} from \"../../redux/profile-reducer\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\n\r\nfunction ProfileContainer(props) {\r\n  let { userId } = useParams();\r\n  if (!userId) {\r\n    // userId = props.autorizedUserId;\r\n    userId = 30361;\r\n    // if (!userId) {\r\n    //   //  userId = props.history.push(\"/login\");\r\n    //   userId = props.router.navigate(\"/login\");\r\n    // }\r\n  }\r\n\r\n  useEffect(() => {\r\n    props.getUserProfile(userId);\r\n    props.getStatus(userId);\r\n  }, [userId]);\r\n\r\n  // if (!props.authorisedUserId && !props.router.params.userId) {\r\n  //   return <Login />;\r\n  // }\r\n  //console.log(\"render PROFILE\");\r\n  return (\r\n    <div>\r\n      <Profile\r\n        {...props}\r\n        isOwner={userId == 30361}\r\n        //   isOwner={30361}\r\n        userProfile={props.userProfile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n        savePhoto={props.savePhoto}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer);\r\n\r\n// let mapStateToPropsRedirect = (state) => ({\r\n//   isAuth: state.auth.isAuth,\r\n// });\r\n// AuthRedirectComponent = connect(mapStateToPropsRedirect)(AuthRedirectComponent);\r\n\r\nlet mapStateToProps = (state) => {\r\n  // console.log(\"mapStateToProps PROFILE\");\r\n  return {\r\n    userProfile: state.profilePage.userProfile,\r\n    status: state.profilePage.status,\r\n    autorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\n// export default connect(mapStateToProps, { getUserProfile })(\r\n//   AuthRedirectComponent\r\n// );\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhoto,\r\n  }),\r\n  withRouter,\r\n  withAuthRedirect\r\n)(ProfileContainer);\r\n\r\n//export default connect(mapStateToProps, { getUserProfile })(ProfileContainer);\r\n\r\n// import React from \"react\";\r\n// import axios from \"axios\";\r\n// import Profile from \"./Profile\";\r\n// import { setUserProfile } from \"../../redux/profile-reducer\";\r\n// import { connect } from \"react-redux\";\r\n// import { useParams, withRouter } from \"react-router-dom\";\r\n\r\n// export function withRouter(Children) {\r\n//   return (props) => {\r\n//     const match = { params: useParams() };\r\n//     return <Children {...props} match={match} />;\r\n//   };\r\n// }\r\n\r\n// class ProfileContainer extends React.Component {\r\n//   componentDidMount() {\r\n//     debugger;\r\n//     axios\r\n//       .get(`https://social-network.samuraijs.com/api/1.0/profile/2`)\r\n//       .then((response) => {\r\n//         this.props.setUserProfile(response.data);\r\n//       });\r\n//   }\r\n//   render() {\r\n//     return <Profile {...this.props} userProfile={this.props.userProfile} />;\r\n//   }\r\n// }\r\n// let mapStateToProps = (state) => ({\r\n//   userProfile: state.profilePage.userProfile,\r\n// });\r\n// let WithUrlDataContainerComponent= withRouter(ProfileContainer)\r\n// export default connect(mapStateToProps, { setUserProfile })(WithUrlDataContainerComponent);\r\n\r\n{\r\n  /* {props.userProfile.userId} */\r\n}\r\n{\r\n  /* {props.userProfile.userId} {...props}  */\r\n}\r\n\r\n//\r\n"],"names":["props","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","useEffect","_jsxs","children","_jsx","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","React","userProfile","Preloader","className","s","userId","src","photos","large","userPhoto","alt","isOwner","type","target","files","length","savePhoto","ProfileStatusWithHooks","aboutMe","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","lookingForAJob","lookingForAJobDescription","fullName","message","like","maxLength10","maxLengthCreater","MyPostsReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","name","component","Textarea","validate","required","memo","postsElements","_toConsumableArray","posts","reverse","map","p","Post","values","addPost","newPostText","connect","state","profilePage","dispatch","addPostActionCreater","MyPosts","ProfileInfo","MyPostsContainer","compose","autorizedUserId","auth","isAuth","getUserProfile","getStatus","withRouter","withAuthRedirect","useParams","Profile","_objectSpread"],"sourceRoot":""}